@using ZkData
@using ZeroKWeb
@model Planet
@{
	ViewBag.Title = "Planet";
	Page.Title = "Planet " + Model.Name;
	var autohost = Global.Server.GetPlanetBattles(Model).OrderByDescending(x=>x.Users.Count).FirstOrDefault();
	var db = new ZkData.ZkDataContext();
    var colorStyle = "";
    if (Model.Faction != null) {
        colorStyle = "color:" + Model.Faction.Color + ";";
    }
}
<h1 style="@colorStyle">
    @if (Model.Faction != null) {
        @Html.PrintFaction(Model.Faction)
    } 
    Planet @Model.Name
</h1>
<table>
    <tr>
        <td>
            @Html.Partial("PlanetIcon", Model)
        </td>
        <td>
            @Html.Partial("MapInfoBox", Model.Resource)
        </td>
        <td>
            <ul>
                @foreach (var p in Model.LinksByPlanetID1.Union(Model.LinksByPlanetID2)) {
                    var planet = p.PlanetByPlanetID1 == Model ? p.PlanetByPlanetID2 : p.PlanetByPlanetID1;
                    <li>@Html.PrintPlanet(planet)</li>
                }
            </ul>
        </td>
    </tr>
</table>

@if (Global.IsAccountAuthorized && Global.Account.CanPlayerPlanetWars() && (Global.Server.PlanetWarsMatchMaker != null && Global.Server.PlanetWarsMatchMaker.AttackingFaction.FactionID == Global.FactionID) && Model.CanMatchMakerPlay(Global.Account.Faction))
{
    <a href="@Url.Action("MatchMakerAttack", "Planetwars", new { planetID = Model.PlanetID })">ATTACK PLANET</a>
}


@if (autohost != null && autohost.IsInGame) { 
	<b>
		@if (autohost.IsInGame) {
            <a href="@Url.Action("WatchBattle", "Lobby", new {id=autohost.BattleID})" class="js_ping">Battle in progress, JOIN TO WATCH</a>
        }
	</b>
}
@{
	var galaxy = db.Galaxies.Single(g => g.IsDefault);
	var mapWidth = 700;
	var mapHeight = 500;
}
@section head {
	<script type="text/javascript">
        window.onload = function () 
        {
            var paper = Raphael(document.getElementById("minimap"), @mapWidth, @mapHeight);

            @foreach (var link in galaxy.Links) {
							var p1 = link.PlanetByPlanetID1;
							var p2 = link.PlanetByPlanetID2;

							var x1 = p1.X * mapWidth;
							var y1 = p1.Y * mapHeight;
							var x2 = p2.X * mapWidth;
							var y2 = p2.Y * mapHeight;


							
								var width = 2;
								var color1 = p1.GetColor(Global.Account);
								var color2 = p2.GetColor(Global.Account);
								var angle = -Math.Atan2(x2 - x1, y2 - y1) / Math.PI * 180;
								var length = Math.Sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));
                    @: var r = paper.rect(@x1-@width/2, @y1, @width, @length);
                    @: r.attr({
                    @:  "fill": "90-@color2-@color1",
                    @:  "stroke": "none"
                    @: });
                    @: r.rotate(@angle, @x1, @y1);
                

						} 

            @foreach (var planet in galaxy.Planets) {
							var mapIconSize = 10;
							var stroke = "#000000";
							if (planet.PlanetID == Model.PlanetID) {
								mapIconSize *= 2;
								stroke = "#ffffff";
							}
                @: var circle = paper.circle(@(planet.X * mapWidth), @(planet.Y * mapHeight), @mapIconSize);
                @: circle.attr({
                @:  "fill": "@planet.GetColor(Global.Account)",
                @:  "stroke": "@stroke",
                @:  "stroke-width": "3"
                @: });
            }
        };
	</script>
}
@Html.Partial("PlanetSummary", Model)

@if (Global.Account != null && Global.IsModerator)
{
    <div class="admin">
        <form method="post" action="@Url.Action("SubmitRenamePlanet")">
            <input type="hidden" name="planetID" value="@Model.PlanetID"/>
            <table>
                <tr>
                    <td>Name</td>
                    <td><input type="text" name="newName" value="@Model.Name" /></td>
                </tr>
                <tr>
                    <td>Team size</td>
                    <td><input type="text" name="teamSize" value="@Model.TeamSize" /></td>
                </tr>
                <tr>
                    <td>Map</td>
                    <td><input type="text" name="map" value="@Model.Resource.InternalName"  data-autocomplete="@Url.Action("Maps", "Autocomplete")"/></td>
                </tr>
            </table>
            <input type='submit' value="Modify planet"/>
        </form>
    </div>
}


<div class="js_tabs">
	<ul>
		<li><a href="#influence"><span>Influence</span></a></li>
		<li><a href="#dropships"><span>Starships</span></a></li>
		<li><a href="#structures"><span>Structures</span></a></li>
		<li><a href="#events"><span>Events</span></a></li>
		<li><a href="#minimap"><span>Navigation</span></a></li>
	</ul>
	<div id="influence">
        
        @Html.Partial("InfluenceList", Model.PlanetFactions)
	</div>
	<div id="dropships">
		@Html.Partial("PlanetDropships", Model)
		@if (Global.IsAccountAuthorized) {
		if (Global.Account.GetDropshipsAvailable() <= 0) {
			<span>You have no free dropships - fight more battles</span>
		} else {
			var isAccessible = Model.CanDropshipsAttack(Global.Account.Faction);
            var isWarp = Model.CanDropshipsWarp(Global.Account.Faction) && Global.Account.GetWarpAvailable() >= GlobalConst.DropshipsForFullWarpIPGain && Global.Account.GetDropshipsAvailable() >= GlobalConst.DropshipsForFullWarpIPGain; 
			if (isAccessible) {
                var avail = Global.Account.GetDropshipsAvailable();
                <form action='@Url.Action("SendDropships", "Planetwars", new { planetID = Model.PlanetID })' method="post">
                    Invade planet (@Html.PrintDropships(avail, Global.Account.Faction)):
                    <input type="text" name="count" />
                    <input type="submit" value="send" />
                </form>
                <br />

            } else if (isWarp) {
                var availD = Global.Account.GetDropshipsAvailable();
                var availW = Global.Account.GetWarpAvailable();
                <form action='@Url.Action("SendDropships", "Planetwars", new { planetID = Model.PlanetID, useWarp = true })' method="post">
                    Warp to planet (@Html.PrintDropships(availD, Global.Account.Faction) @Html.PrintWarps(availW)):
                    <input type="text" name="count" />
                    <input type="submit" value="send" />
                </form>
                
            } else  {
                <span>Dropships cannot get to this planet</span>  
			}
		}
            <br/>
        bool ownPlanet = Model.OwnerFactionID == Global.Account.FactionID;
        if (Global.Account.GetBombersAvailable() <= 0) {
			<span>You have no free bombers - produce some</span>
		} 
        else if (!ownPlanet && Global.Account.GetBombersAvailable() <= (Model.PlanetStructures.Where(x => x.IsActive).Sum(x => x.StructureType.EffectBomberDefense) ?? 0)) 
        {
			<span>Insufficient bombers to overcome planet defenses</span>
        }
        else {
			var isAccessible = Model.CanBombersAttack(Global.Account.Faction);
            var isWarp = Model.CanBombersWarp(Global.Account.Faction) && Global.Account.GetWarpAvailable() >= 1; 
			if (isAccessible) {
                var avail = Global.Account.GetBombersAvailable();
                <form action='@Url.Action("BombPlanet", "Planetwars", new { planetID = Model.PlanetID })' method="post">
                    <span>Bomb planet (@Html.PrintBombers(avail)):</span>
                    <input type="text" name="count" />
                    <input type="submit" value="send" />
                </form>
                <br />

            } else if (isWarp) {
                var availB = Global.Account.GetBombersAvailable();
                var availW = Global.Account.GetWarpAvailable();
                <form action='@Url.Action("BombPlanet", "Planetwars", new { planetID = Model.PlanetID, useWarp = true })' method="post">
                    Warp bombers (@Html.PrintBombers(availB) @Html.PrintWarps(availW)):
                    <input type="text" name="count" />
                    <input type="submit" value="send" />
                </form>
                
            } else  {
                <span>Bombers cannot get to this planet</span>  
			}
		}
	}
	</div>
	<div id="minimap">
	</div>
	<div id="structures">
        <h2>Installed</h2>
        @foreach (var structure in Model.PlanetStructures) {
            <div style="border: 1px solid teal">
            <b>@Html.PrintStructureState(structure)</b> owned by @Html.PrintAccount(structure.Account)
                @if ((Global.Account != null) &&
                        (Global.Account.FactionID == Model.OwnerFactionID) &&
                        ((Global.Account.HasFactionRight(x => x.RightMetalQuota > 0)) || Model.OwnerAccountID == Global.AccountID) &&
                        structure.OwnerAccountID != Global.AccountID)
                {
                    if (Global.Account.HasFactionRight(x => x.RightMetalQuota > 0))
                    {
                        <a href="@Url.Action("ConfiscateStructure", "Planetwars", new { planetID = Model.PlanetID, structureTypeID = structure.StructureTypeID })"><span> - confiscate</span></a>
                    }
                    else if (Model.Account.GetMetalAvailable() >= structure.StructureType.Cost)
                    {
                        <a href="@Url.Action("ConfiscateStructure", "Planetwars", new { planetID = Model.PlanetID, structureTypeID = structure.StructureTypeID })"><span> - confiscate (@Html.PrintMetal(structure.StructureType.Cost))</span></a>
                        
                    }
                    else
                    {
                        <span> - confiscate (@Html.PrintMetal(structure.StructureType.Cost))</span>
                    }

                }
                <br/>
                @if (structure.StructureType.UpkeepEnergy > 0 )
                {
                    if (Global.Account != null && Global.Account.CanSetPriority(structure))
                    {
                        var priority = structure.EnergyPriority;
                        <form method="POST" action="@Url.Action("SetEnergyPriority", new { planetID = Model.PlanetID, structureTypeID = structure.StructureTypeID })">
                            Energy priority: @Html.EditorFor(x => priority, "Enum") <input type="submit" value="change"/>
                        </form>
                    }
                    else
                    {
                        <span>Energy priority: @structure.EnergyPriority.Description()</span>
                    }
                }
                <br/>
                
                @if (structure.StructureType.MetalToRushActivation > 0 && !structure.IsActive && !structure.IsRushed())
                {
                    if (structure.CanRush(Global.Account))
                     {
                         <a href="@Url.Action("RushActivation", "Planetwars", new { planetID = Model.PlanetID, structureTypeID = structure.StructureTypeID })">
                             <span>Rush activation @structure.StructureType.RushActivationTime turn(s) (@Html.PrintMetal(structure.StructureType.MetalToRushActivation))</span>
                         </a>
                     }
                     else
                     {
                         <span>Rush activation costs @Html.PrintMetal(structure.StructureType.MetalToRushActivation)</span>
                     }
                    <br/>
                }


                @if (structure.StructureType.RequiresPlanetTarget)
                {
                    <span>Target planet: @Html.PrintPlanet(structure.PlanetByTargetPlanetID)</span>
                    if (Global.Account != null && Global.Account.CanSetStructureTarget(structure))
                    {
                    <form method="POST" action="@Url.Action("SetStructureTarget", new { planetID = Model.PlanetID, structureTypeID = structure.StructureTypeID })">
                        Target planet: @Html.DropDownList("targetPlanetID", structure.Planet.Galaxy.Planets.OrderBy(x=>x.Name).Select(x => new SelectListItem() { Text = x.Name, Value = x.PlanetID.ToString() }))
                    <input type="submit" value="change"/>

                    </form>
                        if (structure.StructureType.IsSingleUse && structure.IsActive && structure.TargetPlanetID != null)
                        {
                        string question = String.Format("WARNING: {0} will be used once on the specified target {1}, after which it will be removed. Proceed?", structure.StructureType.Name, structure.PlanetByTargetPlanetID);
                        @Html.ActionLink("Activate", "ActivateTargetedStructure", new { planetID = Model.PlanetID, structureTypeID = structure.StructureTypeID},
                            new { @onclick = String.Format("return confirm('{0}')", question) })
                        }
                    }
                }
                

                @Html.DisplayFor(x => structure.StructureType)
            </div>
        }
		@if (Global.FactionID == Model.OwnerFactionID)
  {
			<h2>Construction</h2>
      

      var planet = db.Planets.Single(p => p.PlanetID == Model.PlanetID);
      foreach (var structureType in db.StructureTypes.Where(s => s.IsBuildable).OrderBy(x => x.Cost))
      {
          if (!planet.PlanetStructures.Any(x => x.StructureTypeID == structureType.StructureTypeID))
          {
              if (structureType.Cost > Global.Account.GetMetalAvailable())
              {
                        <span nicetitle="$structuretype$@structureType.StructureTypeID">@structureType.Name (@Html.PrintMetal(structureType.Cost))</span><br/>
              }
              else
              {
                        <a nicetitle="$structuretype$@structureType.StructureTypeID" href="@Url.Action("BuildStructure", new { planetID = Model.PlanetID, structureTypeID = structureType.StructureTypeID })">Build @structureType.Name (@Html.PrintMetal(structureType.Cost))</a><br />
              }
          }
      }
            
            
            <h2>Self destruct</h2>
      foreach (var structureType in planet.PlanetStructures.Where(s => s.StructureType.IsBuildable && (planet.OwnerAccountID == Global.AccountID || s.OwnerAccountID == Global.AccountID)).Select(x => x.StructureType))
      {
          if (planet.PlanetStructures.Any(x => x.StructureTypeID == structureType.StructureTypeID))
          {
                    <a nicetitle="$structuretype$@structureType.StructureTypeID" href="@Url.Action("DestroyStructure", new { planetID = Model.PlanetID, structureTypeID = structureType.StructureTypeID })" class="js_confirm">Destroy @structureType.Name (@Html.PrintMetal(structureType.Cost * GlobalConst.SelfDestructRefund))</a><br />
          }
      }
  }
	</div>
	<div id="events">
		@Html.Action("Events", new { planetID = Model.PlanetID, partial = true })
	</div>

</div>
	<br />
@Html.Partial("CommentList", new ZeroKWeb.Models.CommentList() { Thread = Model.ForumThread, ActionData = new { planetID = Model.PlanetID, threadID = Model.ForumThreadID } })
