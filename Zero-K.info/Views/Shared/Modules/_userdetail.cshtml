@using ZeroKWeb
@using ZkData
@model ZkData.Account

<div id="userdetail" class="module">
    <h2 class="handle">
        @HtmlHelperExtensions.PrintAccount(Model)
        <span class="adminuser">
            @if (Global.AccountID == Model.AccountID)
            {
                if (Global.IsModerator)
                {
                    // nothing required here
                }
                else
                {
                    // contact admins
                    <a href=""><i class="fa fa-suitcase" style="color: inherit;"></i></a>
                }
            }
            else
            {
                if (Global.IsModerator)
                {
                    // admin user
                    <a href="/Users/AdminUserDetail/@(Model.AccountID)"><i class="fa fa-gavel"></i></a>
                }
                else
                {
                    // report user
                    <a href=""><i class="fa fa-flag"></i></a>
                }
            }
        </span>
    </h2>

    @*@{
                MvcHtmlString ranks = new MvcHtmlString(Ratings.Ranks.RankBackgroundImages.Select((x, i) => (string)("<img class='icon16' src='/img/ranks/" + Model.GetIconLevel() + "_" + i + ".png'>")).Aggregate((x, y) => x + y));
                MvcHtmlString levels = new MvcHtmlString(Ratings.Ranks.RankBackgroundImages.Select((x, i) => (string)("<img class='icon16' src='/img/ranks/" + i + "_" + Model.Rank + ".png'>")).Aggregate((x, y) => x + y));
            }

        @if (!Global.IsLobbyAccess)
        {
            int star = 0;
            int chev = 0;
            int bars = 0;
            <div id="badge">
                <div id="levelrank" title="This is a graphical representation of the player's exact level. <br /> <br />Play more games to increase your level!">
                    <!--<div id="velvet"><img src="../../img/ranks/level-elo/velvetbacking.jpg" width="100%" height="100%" /></div>-->
                    <div id="badge-center">
                        @if (Model.Level > 125)
                        {
                            star = 125;
                            <div id="badge-star">
                                <img src="../../img/ranks/level-elo/star.png" class="rank star" />
                            </div>
                        }
                        <div id="badge-chevrons">
                            @for (int i = 0; i < (Model.Level - star) / 25; i++)
                            {
                                <img src="../../img/ranks/level-elo/chevron_gold.png" class="rank chev chev-@(i + 1)" />
                                chev += 25;
                            }
                        </div>
                        <div id="badge-bars">
                            @for (int i = 0; i < (Model.Level - star - chev) / 5; i++)
                            {
                                <img src="../../img/ranks/level-elo/bar_gold.png" class="rank bar bar-@(i + 1)" />
                                bars += 1;
                            }
                            <div class="rank dotline bar-@(bars + 1)">
                                @for (int i = 0; i < (Model.Level - star - chev) % 5; i++)
                                {
                                    <img src="../../img/ranks/level-elo/dot_gold.png" class="dot" />
                                }
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }
    *@

    <div class="progress-container">

        <div class="progressbars">
            <br class="clearfloat" />
            @{ double ratio = Model.GetLevelUpRatio(); }
            <div title='Current level: <img src="/img/ranks/@(Model.GetIconLevel())_@(Model.Rank).png"  class="icon16" alt="rank" /> Level @(Model.Level) <br /> <br /> Progress to the next level: @((int)(ratio*100))% <br /> <br />XP remaining for level @(Model.Level + 1): @(Account.GetXpForLevel(Model.Level + 1) - Model.Xp)<br /> <br />Play more games to increase your level!'>

                <div class="progress_wrapper_left">
                    <div class="progress_text techfont"> Level @Model.Level </div>
                    <div class="progress_begin"></div>
                </div>
                <div class="progress_wrapper">
                    <div class="progress_filler" style="width: @((int)(100*ratio))%;"></div>
                    <div class="progress_empty" style="width: @((100 - (int)(100*ratio)))%;"></div>
                </div>
                <div class="progress_wrapper_right">
                    <div class="progress_end"></div>
                    <div class="progress_text techfont"> Level @(Model.Level + 1) </div>
                </div>
            </div>
            <br class="clearfloat" />
            <br />
            @{ ratio = Ratings.Ranks.GetRankProgress(Model); }
            <div title="@Html.PrintRankProgress(Model)">
                <div class="progress_wrapper_left">
                    <div class="progress_text techfont"> @Ratings.Ranks.RankNames[Model.Rank] </div>
                    <div class="progress_begin"></div>
                </div>
                <div class="progress_wrapper">
                    <div class="progress_filler" style="width: @((int)(100*ratio))%;"></div>
                    <div class="progress_empty" style="width: @((100 - (int)(100*ratio)))%;"></div>
                </div>
                <div class="progress_wrapper_right">
                    <div class="progress_end"></div>
                    <div class="progress_text techfont">  @Ratings.Ranks.RankNames[Model.Rank + 1] </div>
                </div>
            </div>
        </div>
    </div>

    <img class="rankbg" src="@Ratings.Ranks.GetRankBackgroundImagePath(Model)" />

</div>