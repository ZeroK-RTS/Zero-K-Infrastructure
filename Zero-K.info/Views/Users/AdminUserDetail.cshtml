@using ZeroKWeb
@using ZkData
@model ZkData.Account

@{
    Page.Title = Model.Name + " User Administration";

    var brokenIDs = new List<Int64>() { 1236934115, 1199297835, -2130083051, 195445522, 1141552226 };
    var smurfs = Model.GetSmurfs();

    // TODO: move this to account property or get reference to linq?
    int totalWarnings = 0;
    foreach (var p in Model.PunishmentsByAccountID)
    {
        if (!p.hasConsequences && !p.MessageOnly)
        {
            totalWarnings++;
        }
    }
    int totalPunishments = 0;
    foreach (var p in Model.PunishmentsByAccountID)
    {
        if (p.hasConsequences)
        {
            totalPunishments++;
        }
    }

    Int64? lastUserID = null;
    if (Model.AccountUserIDs.Any())
    {
        lastUserID = Model.AccountUserIDs.OrderByDescending(x => x.LastLogin).FirstOrDefault().UserID;
    }

    string lastInstallID = null;
    if (Model.AccountUserIDs.Any())
    {
        lastInstallID = Model.AccountUserIDs.OrderByDescending(x => x.LastLogin).FirstOrDefault().InstallID;
    }
}

<style>

    .group {
        background: rgba(0,0,0,0.75);
        padding: 1em;
        margin: 1em;
    }

    .infokey {
        display: inline-block;
        width: 10em;
        font-weight: bold;
    }

    .infovalue, .infovalue form {
        display: inline-block;
    }

        .infovalue form input {
            margin: 0;
            margin-left: 2em;
        }

    .purge form {
        background: rgba(0,0,0,0.5);
        padding: 1em;
        margin: 1em;
    }

    #summarytransition {
        height: 4em;
    }

    .page-summary {
        background: rgba(0,0,0,0.8);
        width: 100%;
        padding: 1em;
    }

    .summary-affixed {
        position: fixed;
        left: 0;
        right: 0;
        z-index: 999;
    }

</style>

<div id="summarytransition">
    <div class="page-summary">
        Administration: @Html.PrintAccount(Model, true, true)
        <span class="playerreports"><i class="fa fa-flag"></i>@Model.AbuseReportsByAccountID.Count</span>
        <span class="warning"><i class="fa fa-warning"></i>@totalWarnings</span>
        <span class="punishment"><i class="fa fa-gavel"></i>@totalPunishments</span>
    </div>
</div>
<div class="">
    <div class="group user-info">
        <h1>User Info</h1>
        <div><span class="infokey">Account Id:</span> <span class="infovalue">@Model.AccountID</span></div>
        <div>
            <span class="infokey">Steam Id:</span>
            <div class="infovalue">
                @if (Model.SteamID == null)
                {
                    <span>Not linked with Steam</span>
                }
                else
                {
                    <span>@Model.SteamID (@Model.SteamName)</span>
                    <form method="post" action="@Url.Action("UnlinkSteamID", "Users", new { accountID = Model.AccountID })">
                        @Html.AntiForgeryToken()
                        <input type="submit" value="Unlink Steam Account" class="js_confirm" />
                    </form>
                }
            </div>
        </div>
        <div><span class="infokey">Lobby Version:</span> <span class="infovalue">@(Model.LobbyVersion ?? "Not Available")</span></div>
        <div><span class="infokey">Last Login:</span> <span class="infovalue">@Model.LastLogin</span></div>
        <div><span class="infokey">Last Logout:</span> <span class="infovalue">@Model.LastLogout</span></div>
        <div><span class="infokey">Last Chat Read:</span> <span class="infovalue">@Model.LastChatRead</span></div>

        <div class="group">
            <h3>Smurfs</h3>
            @foreach (var ac in smurfs)
            {
                <div>
                    <span>@Html.PrintAccount(ac, true, true)  -  @Html.ActionLink("admin", "AdminUserDetail", new { id = ac.AccountID })</span>
                    @if (ac.PunishmentsByAccountID.Any(x => x.BanExpires > DateTime.UtcNow && x.BanLobby))
                    {
                        <font color="#FF0000"><b>(BANNED)</b></font>
                    }
                </div>
            }
        </div>
        <div class="group">
            <h3>IP Addresses:</h3>
            <div>
                <table>
                    <thead>
                        <tr>
                            <th>IP</th>
                            <th>Count</th>
                            <th>First</th>
                            <th>Last</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (AccountIP x in Model.AccountIPs.OrderByDescending(x => x.LastLogin))
                        {
                            <tr>
                                <td>@x.IP</td>
                                <td>@x.LoginCount</td>
                                <td>@x.FirstLogin</td>
                                <td>@x.LastLogin</td>
                                <td><a target="_blank" href="http://whatismyipaddress.com/ip/@x.IP">Lookup IP</a> </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
        <div class="group">
            <h3>User Ids:</h3>
            <table>
                <thead>
                    <tr>
                        <th>UserID</th>
                        <th>InstallID</th>
                        <th>Count</th>
                        <th>First</th>
                        <th>Last</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (AccountUserID x in Model.AccountUserIDs.OrderByDescending(x => x.LastLogin))
                    {
                        <tr>
                            <td>@x.UserID</td>
                            <td>@x.InstallID</td>
                            <td>@x.LoginCount</td>
                            <td>@x.FirstLogin</td>
                            <td>@x.LastLogin</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
    <div class="group abuse-reports">
        <h1>Abuse reports <span class="playerreports"><i class="fa fa-flag"></i>@Model.AbuseReportsByAccountID.Count</span></h1>
        <table>
            <tbody style="vertical-align:top; background-color:#222">
                @foreach (var a in Model.AbuseReportsByAccountID)
                {
                    <tr><td>@a.Time</td><td>@Html.PrintAccount(a.AccountByReporterAccountID, true, true)</td><td style="padding-bottom:25px;">@Html.BBCode(a.Text)</td></tr>
                }
            </tbody>
        </table>
    </div>
    <div class="group penalties">
        <h1>
            Penalties
            <span class="warning"><i class="fa fa-warning"></i>@totalWarnings</span>
            <span class="punishment"><i class="fa fa-gavel"></i>@totalPunishments</span>
        </h1>
        @if (Model.PunishmentsByAccountID.Any())
        {
            foreach (Punishment p in Model.PunishmentsByAccountID.Where(x => !x.IsExpired).OrderByDescending(x => x.Time))
            {
                @Html.DisplayFor(x => p)
            }
        }
        <hr />
        <h2>Expired</h2>
        @if (Model.PunishmentsByAccountID.Any())
        {
            foreach (Punishment p in Model.PunishmentsByAccountID.Where(x => x.IsExpired).OrderByDescending(x => x.Time))
            {
                @Html.DisplayFor(x => p)
            }
        }
    </div>
    <div class="group actions">
        <h1>Actions</h1>
        <div>
            <form method="post" action="@Url.Action("SetPassword", "Users", new { accountID = Model.AccountID })">
                @Html.AntiForgeryToken()
                <label for="newPassword">Set (Temporary) Password:</label>
                <input type="text" id="newPassword" name="newPassword" value="" />
                <input type="submit" value="Change Password" />
                <div>TODO: make this value set a flag on the account to have player forcibly update it themselves to something different.</div>
            </form>

            <form method="post" action="@Url.Action("SetUsername", "Users", new { accountID = Model.AccountID })">
                @Html.AntiForgeryToken()
                <label for="newUsername">Set Username:</label>
                <input type="text" id="newUsername" name="newUsername" value="Lobster" />
                <input type="submit" value="Change Username" />
            </form>

            <form method="post" action="@Url.Action("ChangeHideCountry", "Users", new { accountID = Model.AccountID })">
                @Html.AntiForgeryToken()
                <div class="permission">
                    <label class="switch">
                        @* @Html.CheckBox("hideCountry", Model.HideCountry) *@
                        <input id="hideCountry" name="hideCountry" type="checkbox" />
                        <span class="slider"></span>
                    </label>
                    <label for="hideCountry">Hide Country:</label>
                </div>
                <input type="submit" value="Apply" />
            </form>

            <form method="post" action="@Url.Action("ChangePermissions", "Users", new { accountID = Model.AccountID })">
                @Html.AntiForgeryToken()
                <div>TODO: this only available to superadmin? hide otherwise</div>
                <div class="permission">
                    <label class="switch">
                        @* @Html.CheckBox("zkAdmin", Model.AdminLevel >= AdminLevel.Moderator) *@
                        <input id="zkAdmin" name="zkAdmin" type="checkbox" />
                        <span class="slider"></span>
                    </label>
                    <label for="zkAdmin">Zero-K Admin</label>
                </div>
                <div class="permission">
                    <label class="switch">
                        @* @Html.CheckBox("tourneyController", Model.IsTourneyController) *@
                        <input id="tourneyController" name="tourneyController" type="checkbox" />
                        <span class="slider"></span>
                    </label>
                    <label for="tourneyController">Tourney Control</label>
                </div>
                <div class="permission">
                    <label class="switch">
                        @* @Html.CheckBox("vpnException", Model.HasVpnException) *@
                        <input id="vpnException" name="vpnException" type="checkbox" />
                        <span class="slider"></span>
                    </label>
                    <label for="vpnException">VPN Exception</label>
                </div>
                <input type="submit" value="Modify User" />
            </form>

        </div>
    </div>
    <div class="group punish">
        <h1>Banhammer Time</h1>
        <script>

            function addPunishmentHours(hours) {
                hours = parseInt(hours);
                if (!hours) hours = 0;

                var oldHours = parseInt($("#banHours").val());
                if (!oldHours) oldHours = 0;

                var newHours = oldHours + hours;
                $("#banHours").val(newHours).change();
            }

            $(document).ready(function () {
                // common ban configurations
                $("#punishTeamKill").click(function () {
                    $("#reason").val("Team Killing");
                    $("#banLobby").prop("checked", true);
                    addPunishmentHours(24);
                });
                $("#punishBanDodge").click(function () {
                    $("#reason").val("Ban Dodging");
                    $("#banLobby").prop("checked", true);
                    addPunishmentHours(24 * 7);
                });
                $("#punishBadChat").click(function () {
                    $("#reason").val("Offensive Chat");
                    $("#banMute").prop("checked", true);
                    addPunishmentHours(24);
                });
                $("#punishBadPost").click(function () {
                    $("#reason").val("Offensive Post");
                    $("#banForum").prop("checked", true);
                    addPunishmentHours(24);
                });

                // duration events
                $("#addDay").click(function () {
                    addPunishmentHours(24);
                });
                $("#addWeek").click(function () {
                    addPunishmentHours(24 * 7);
                });
                $("#addMonth").click(function () {
                    addPunishmentHours(24 * 30);
                });
                $("#addYear").click(function () {
                    addPunishmentHours(24 * 365);
                });
                $("#banHours").change(function () {
                    var newHours = parseInt($("#banHours").val());
                    if (!newHours) {
                        $("#hourConversion").html("");
                        return;
                    }

                    var expireDate = new Date();
                    expireDate.setHours(expireDate.getHours() + newHours);
                    $("#hourConversion").html("Expires on " + expireDate.toLocaleString());
                });

                // when punishment selected, change hidden inputs for MVC to bind properly
                $(".consequence input[type=checkbox]").change(function () {
                    var checked = $(this).prop("checked");
                    var hidden = $(".msft-workaround input[name=" + $(this).attr("name") + "]");
                    $(this).val(checked);
                    hidden.val(checked);
                    console.log("checkbox changed", checked, hidden.val(), hidden, this);
                });

                // automatically submits a nightwatch message
                $("#submitMessage").click(function () {
                    // enable message only option
                    $("#messageOnly").val(true);

                    // ensure a duration is provided -- defaults to a week
                    var warningDuration = parseInt($("#banHours").val());
                    if (!warningDuration) warningDuration = 24 * 7;
                    $("#banHours").val(warningDuration).change();

                    // clear out punishments
                    $(".consequence input").prop("checked", false).change();

                    // click submit to generate a message
                    $("#submitPunishments").click();
                });

                // automaticaly submits a warning
                $("#submitWarning").click(function () {
                    // ensure a duration is provided -- defaults to a week
                    var warningDuration = parseInt($("#banHours").val());
                    if (!warningDuration) warningDuration = 24 * 7;
                    $("#banHours").val(warningDuration).change();

                    // ensure no punishments are selected
                    $(".consequence input").prop("checked", false).change();

                    // click submit to generate a warning
                    $("#submitPunishments").click();
                })

                // clears out all form options
                $("#resetPunishments").click(function () {
                    $("#reason").val("");
                    $("#banHours").val("").change();
                    $(".consequence input").prop("checked", false).change();
                });
            });
        </script>
        <style>
            #punish > div {
                background: rgba(0,0,0,0.3);
                padding: 1em;
                margin-top: 1em;
            }

            #banHours {
                display: inline-block;
                width: inherit;
            }

            .flex div, .flex input {
                width: inherit;
                flex-grow: 1;
            }

            .indent-1 {
                padding-left: 1em;
            }

            .indent-2 {
                padding-left: 2em;
            }

            .what {
                float: left;
            }

            .how {
                float: right;
            }
        </style>
        <form id="punish" action="@Url.Action("Punish", "Users", new { accountID = Model.AccountID })" method="post">
            @Html.AntiForgeryToken()

            <div class="who">
                <select>
                    <option>TODO: pull smurf list</option>
                </select>
                <label class="switch">
                    <input id="smurfBan" name="smurfBan" type="checkbox" />
                    <span class="slider"></span>
                </label>
                <label for="smurfBan">Ban Smurf(s)</label>

                <label class="switch">
                    <input id="smurfTransfer" name="smurfTransfer" type="checkbox" />
                    <span class="slider"></span>
                </label>
                <label for="smurfTransfer">Transfer game data to @Model.Name</label>
            </div>

            <div class="why">
                <input type="text" id="reason" name="reason" placeholder="Message" />
                <div class="flex">
                    <input type="button" id="submitMessage" value="SEND NIGHTWATCH MESSAGE" />
                    <input type="button" id="submitWarning" value="GIVE WARNING ONLY" />
                </div>
                <h3>Common Reasons</h3>
                <div class="flex">
                    <input type="button" id="punishTeamKill" value="+ Teamkilling" />
                    <input type="button" id="punishBanDodge" value="+ Ban Dodging" />
                    <input type="button" id="punishBadChat" value="+ Offensive Chat" />
                    <input type="button" id="punishBadPost" value="+ Offensive Post" />
                </div>
            </div>

            <div class="when">
                <div>
                    <input type="text" id="banHours" name="banHours" placeholder="Ban Duration (hours)" />
                    <span id="hourConversion"></span>
                </div>
                <div class="flex">
                    <input type="button" id="addDay" value="+ 1 day" />
                    <input type="button" id="addWeek" value="+ 1 week" />
                    <input type="button" id="addMonth" value="+ 1 month" />
                    <input type="button" id="addYear" value="+ 1 year" />
                </div>
            </div>

            @*
                https://stackoverflow.com/questions/220020/how-to-handle-checkboxes-in-asp-net-mvc-forms
                wtf M$FT why do you make things so $#@!ing difficult?!?
            *@
            <div class="what">
                <div class="msft-workaround">
                    <input type="hidden" name="messageOnly" id="messageOnly" value="false" />
                    <input type="hidden" name="banLobby" value="false" />
                    <input type="hidden" name="banVotes" value="false" />
                    <input type="hidden" name="banCommanders" value="false" />
                    <input type="hidden" name="banMute" value="false" />
                    <input type="hidden" name="banSpecChat" value="false" />
                    <input type="hidden" name="banSite" value="false" />
                    <input type="hidden" name="banForum" value="false" />
                </div>
                <div class="consequence">
                    <label class="switch">
                        <input id="banLobby" name="banLobby" type="checkbox" value="false" />
                        <span class="slider"></span>
                    </label>
                    <label for="banLobby">Ban Lobby</label>
                </div>
                <div class="consequence indent-1">
                    <label class="switch">
                        <input id="banVotes" name="banVotes" type="checkbox" value="false" />
                        <span class="slider"></span>
                    </label>
                    <label for="banVotes">Block Votes</label>
                </div>
                <div class="consequence indent-1">
                    <label class="switch">
                        <input id="banCommanders" name="banCommanders" type="checkbox" value="false" />
                        <span class="slider"></span>
                    </label>
                    <label for="banCommanders">Block Commanders</label>
                </div>
                <div class="consequence indent-1">
                    <label class="switch">
                        <input id="banMute" name="banMute" type="checkbox" value="false" />
                        <span class="slider"></span>
                    </label>
                    <label for="banMute">Mute</label>
                </div>
                <div class="consequence indent-2">
                    <label class="switch">
                        <input id="banSpecChat" name="banSpecChat" type="checkbox" value="false" />
                        <span class="slider"></span>
                    </label>
                    <label for="banSpecChat">Spectator Mute</label>
                </div>
                <div class="consequence">
                    <label class="switch">
                        <input id="banSite" name="banSite" type="checkbox" value="false" />
                        <span class="slider"></span>
                    </label>
                    <label for="banSite">Ban Site</label>
                </div>
                <div class="consequence indent-1">
                    <label class="switch">
                        <input id="banForum" name="banForum" type="checkbox" value="false" />
                        <span class="slider"></span>
                    </label>
                    <label for="banForum">Ban Forum</label>
                </div>
            </div>

            <div class="how">
                <div class="flex">
                    <div>
                        <label for="banIP">Block IP Address</label>
                        <input id="banIP" name="banIP" type="text" placeholder="IP Address" value="" />
                    </div>
                    <div>
                        <label for="banUserID">Block User ID @*(hash of first NIC's MAC)*@</label>
                        <input id="banUserID" name="banUserID" type="text" placeholder="User ID" value="" />
                    </div>
                    <div>
                        <label for="installID">Block Install ID @*(OS ID for Windows)*@</label>
                        <input id="installID" name="installID" type="text" placeholder="Install ID" value="" />
                    </div>
                </div>
            </div>

            <br class="clearfloat" />

            <div class="flex">
                <input type="button" id="resetPunishments" value="RESET FORM" />
                <input type="submit" id="submitPunishments" class="inline js_confirm" value="PUNISH @Model.Name.ToUpper()" />
            </div>
        </form>
    </div>
    <div class="group purge">
        <h1>Purge</h1>
        <input type="button" class="modal-open" data-modal="purgeAccount" value="Delete (Hide/Transfer) Account" />
        <div id="purgeAccount" class="modal">
            <form method="post" action="@Url.Action("ChangeAccountDeleted", "Users", new { accountID = Model.AccountID })">
                @Html.AntiForgeryToken()
                <label for="isDeleted">Hide Account</label>
                @Html.CheckBox("isDeleted")
                <label for="alias">Move all games to account:</label>
                @Html.TextBox("alias")
                <input type="submit" value="do the thing" />
            </form>
        </div>
        <input type="button" class="modal-open" data-modal="purgeRating" value="Delete User Rating" />
        <div id="purgeRating" class="modal">
            <form method="post" action="@Url.Action("DeleteFromRatings", "Users", new { accountID = Model.AccountID })">
                @Html.AntiForgeryToken()
                <h1 class="center warning"><i class="fa fa-warning"></i></h1>
                <div class="center warning">This action cannot be undone!</div>
                <div class="center warning">Affects all players who played with @Model.Name</div>
                <div>This will remove every game this user participated in from the ratings.</div>
                <input type="submit" value="Delete User Rating" />
            </form>
        </div>
        <input type="button" class="modal-open" data-modal="purgePosts" value="Delete Forum Posts" />
        <div id="purgePosts" class="modal">
            <form method="post" action="@Url.Action("DeleteAllPostsByUser", "Forum", new { accountID = Model.AccountID })">
                @Html.AntiForgeryToken()
                <h1 class="center warning"><i class="fa fa-warning"></i></h1>
                <div class="center warning">This action cannot be undone!</div>
                <div>This will permanently remove all of the user's posts. </div>
                <label for="accountName">Enter the target's user name to confirm:</label>
                @Html.TextBox("accountName")
                <input type="submit" class="js_confirm" value="Delete Forum Posts" />
            </form>
        </div>
        <input type="button" class="modal-open" data-modal="purgeVotes" value="Delete Forum Votes" />
        <div id="purgeVotes" class="modal">
            <form method="post" action="@Url.Action("DeleteAllForumVotes", "Users", new { accountID = Model.AccountID })">
                @Html.AntiForgeryToken()
                <h1 class="center warning"><i class="fa fa-warning"></i></h1>
                <div class="center warning">This action cannot be undone!</div>
                <div>This will permanently remove all of the user's up/down votes on the forum.</div>
                <label for="accountName">Enter the target's user name to confirm:</label>
                @Html.TextBox("accountName")
                <input type="submit" class="js_confirm" value="Delete Forum Votes" />
            </form>
        </div>

    </div>
</div>
