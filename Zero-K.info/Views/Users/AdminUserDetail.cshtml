@using ZeroKWeb
@using ZkData
@model ZkData.Account

@{
    Page.Title = Model.Name + " User Administration";

    var brokenIDs = new List<Int64>() { 1236934115, 1199297835, -2130083051, 195445522, 1141552226 };
    var smurfs = Model.GetSmurfs();

    Int64? lastUserID = null;
    if (Model.AccountUserIDs.Any())
    {
        lastUserID = Model.AccountUserIDs.OrderByDescending(x => x.LastLogin).FirstOrDefault().UserID;
    }

    string lastInstallID = null;
    if (Model.AccountUserIDs.Any())
    {
        lastInstallID = Model.AccountUserIDs.OrderByDescending(x => x.LastLogin).FirstOrDefault().InstallID;
    }
}           

<style>
    body {
        font-family: "OpenSans", sans-serif;
    }
    h1 {
        margin-bottom: 1em;
    }
    form {
        border: 1px dotted magenta;
        margin: 1em;
    }
    .group {
        background: rgba(0,0,0,0.5);
        padding: 1em;
        margin: 1em;
    }
    .infokey {
        display: inline-block;
        width: 10em;
        font-weight: bold;
    }
    .infovalue, .infovalue form {
        display: inline-block;
    }
    .infovalue form input {
        margin: 0;
        margin-left: 2em;
    }
    .purge form {
        background: rgba(0,0,0,0.5);
        padding: 1em;
        margin: 1em;
    }
</style>

<div class="">
    <div class="group user-info">
        <h1>Administration: @Html.PrintAccount(@Model, true, true)</h1>
        <div><span class="infokey">Account Id:</span> <span class="infovalue">@Model.AccountID</span></div>
        <div>
            <span class="infokey">Steam Id:</span>
            <div class="infovalue">
                @if (Model.SteamID == null)
                {
                    <span>Not linked with Steam</span>
                }
                else
                {
                    <span>@Model.SteamID</span>
                    <form method="post" action="@Url.Action("UnlinkSteamID", "Users", new { accountID = Model.AccountID })">
                        @Html.AntiForgeryToken()
                        <input type="submit" value="Unlink Steam Account" class="js_confirm" />
                    </form>
                }
            </div>
        </div>
        <div><span class="infokey">Lobby Version:</span> <span class="infovalue">@(Model.LobbyVersion ?? "Not Available")</span></div>
        <div><span class="infokey">Last Login:</span> <span class="infovalue">@Model.LastLogin</span></div>
        <div><span class="infokey">Last Logout:</span> <span class="infovalue">@Model.LastLogout</span></div>
        <div><span class="infokey">Last Chat Read:</span> <span class="infovalue">@Model.LastChatRead</span></div>

        <div class="group">
            <h3>Smurfs</h3>
            @foreach (var ac in smurfs)
            {
                <div>
                    <span>@Html.PrintAccount(ac, true, true)  -  @Html.ActionLink("admin", "AdminUserDetail", new { id = ac.AccountID })</span>
                    @if (ac.PunishmentsByAccountID.Any(x => x.BanExpires > DateTime.UtcNow && x.BanLobby))
                    {
                        <font color="#FF0000"><b>(BANNED)</b></font>
                    }
                </div>
            }
        </div>
        <div class="group">
            <h3>IP Addresses:</h3>
            <div>
                <table>
                    <thead>
                        <tr>
                            <th>IP</th>
                            <th>Count</th>
                            <th>First</th>
                            <th>Last</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (AccountIP x in Model.AccountIPs.OrderByDescending(x => x.LastLogin))
                        {
                            <tr>
                                <td>@x.IP</td>
                                <td>@x.LoginCount</td>
                                <td>@x.FirstLogin</td>
                                <td>@x.LastLogin</td>
                                <td><a target="_blank" href="http://whatismyipaddress.com/ip/@x.IP">Lookup IP</a> </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
        <div class="group">
            <h3>User Ids:</h3>
            <table>
                <thead>
                    <tr>
                        <th>UserID</th>
                        <th>InstallID</th>
                        <th>Count</th>
                        <th>First</th>
                        <th>Last</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (AccountUserID x in Model.AccountUserIDs.OrderByDescending(x => x.LastLogin))
                    {
                        <tr>
                            <td>@x.UserID</td>
                            <td>@x.InstallID</td>
                            <td>@x.LoginCount</td>
                            <td>@x.FirstLogin</td>
                            <td>@x.LastLogin</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
    <div class="group abuse-reports">
        <h1>Abuse reports</h1>
        <table>
            <tbody style="vertical-align:top; background-color:#222">
                @foreach (var a in Model.AbuseReportsByAccountID)
                {
                    <tr><td>@a.Time</td><td>@Html.PrintAccount(a.AccountByReporterAccountID, true, true)</td><td style="padding-bottom:25px;">@Html.BBCode(a.Text)</td></tr>
                }
            </tbody>
        </table>
    </div>
    <div class="group penalties">
        <h1>Penalties</h1>
        @if (Model.PunishmentsByAccountID.Any())
        {
            foreach (Punishment p in Model.PunishmentsByAccountID.Where(x => !x.IsExpired))
            {
                @Html.DisplayFor(x => p)
            }
        }
        <hr />
        <h2>Expired</h2>
        @if (Model.PunishmentsByAccountID.Any())
        {
            foreach (Punishment p in Model.PunishmentsByAccountID.Where(x => x.IsExpired))
            {
                @Html.DisplayFor(x => p)
            }
        }
    </div>
    <div class="group actions">
        <h1>Actions</h1>
        <div>
            <form method="post" action="@Url.Action("SetPassword", "Users", new { accountID = Model.AccountID })">
                @Html.AntiForgeryToken()
                <label for="newPassword">Set (Temporary) Password:</label>
                <input type="text" id="newPassword" name="newPassword" value="" />
                <input type="submit" value="Change Password" />
                <div>TODO: make this value set a flag on the account to have player forcibly update it themselves to something different.</div>
            </form>

            <form method="post" action="@Url.Action("SetUsername", "Users", new { accountID = Model.AccountID })">
                @Html.AntiForgeryToken()
                <label for="newUsername">Set Username:</label>
                <input type="text" id="newUsername" name="newUsername" value="Lobster" />
                <input type="submit" value="Change Username" />
            </form>

            <form method="post" action="@Url.Action("ChangeHideCountry", "Users", new { accountID = Model.AccountID })">
                @Html.AntiForgeryToken()
                <label for="hideCountry">Hide Country:</label>
                @Html.CheckBox("hideCountry", Model.HideCountry)
                <input type="submit" value="Apply" />
            </form>

            <form method="post" action="@Url.Action("ChangePermissions", "Users", new { accountID = Model.AccountID })">
                @Html.AntiForgeryToken()
                TODO: this only available to superadmin? hide otherwise <br />
                <label for="zkAdmin">Zero-K Admin</label>
                <label class="switch">
                    @*@Html.CheckBox("zkAdmin", Model.AdminLevel >= AdminLevel.Moderator)*@
                    <input id="zkAdmin" name="zkAdmin" type="checkbox" />
                    <span class="slider"></span>
                </label>
                <label for="tourneyController">Tourney Control</label>
                @Html.CheckBox("tourneyController", Model.IsTourneyController)
                <label for="vpnException">VPN Exception</label>
                @Html.CheckBox("vpnException", Model.HasVpnException)
                <input type="submit" value="Modify User" />
            </form>

        </div>
    </div>
    <div class="group penalties">
        <h1>Penalties</h1>

        <form action="@Url.Action("Punish", "Users", new { accountID = Model.AccountID })" method="post">
            @Html.AntiForgeryToken()
            Reason: @Html.TextBox("reason", "Smurf", new { style = "width:500px" })<br />
            Message only, not a penalty: @Html.CheckBox("messageOnly")<br />

            Punishment hours: @Html.TextBox("banHours", 1)<br />
            <br />
            Mute: @Html.CheckBox("banMute")<br />
            Block Votes: @Html.CheckBox("banVotes")<br />
            Block commanders: @Html.CheckBox("banCommanders")<br />
            Disallow spec chat: @Html.CheckBox("banSpecChat")<br />
            <br />
            Ban site: @Html.CheckBox("banSite")<br />
            Ban lobby: @Html.CheckBox("banLobby")<br />
            Ban forum: @Html.CheckBox("banForum")<br />
            <br />
            IP: @Html.TextBox("banIP", Model.AccountIPs.OrderByDescending(x => x.LastLogin).Select(x => x.IP).FirstOrDefault())<br />
            User ID: @Html.TextBox("banUserID", lastUserID != null && !brokenIDs.Contains((int)lastUserID) ? lastUserID.ToString() : "")<br />
            Install ID: @Html.TextBox("installID", lastInstallID)<br />

            <input type="submit" value="PUNISH" class="js_confirm" />
        </form>
    </div>
    <div class="group purge">
        <h1>Purge</h1>
        <form method="post" action="@Url.Action("DeleteFromRatings", "Users", new { accountID = Model.AccountID })">
            @Html.AntiForgeryToken()
            <input type="submit" value="Delete User Rating" />
            This will remove every game this user participated in from the ratings. <br />
            It will impact every person this user played with and cannot be undone without rolling back the database!
        </form>

        <form method="post" action="@Url.Action("ChangeAccountDeleted", "Users", new { accountID = Model.AccountID })">
            @Html.AntiForgeryToken()
            <label for="isDeleted">Hide (Delete) Account</label>
            Deleted: @Html.CheckBox("isDeleted") <br />
            Move all games to account: @Html.TextBox("alias") <br />
            <input type="submit" />
        </form>

        <form method="post" action="@Url.Action("DeleteAllPostsByUser", "Forum", new { accountID = Model.AccountID })">
            @Html.AntiForgeryToken()
            This will <b>permanently</b> remove <b>all</b> of the user's posts.<br />
            This action <b>cannot</b> be undone!<br />
            <br />
            Enter the target's user name to confirm: @Html.TextBox("accountName")
            <input type="submit" value="Delete Forum Posts" class="js_confirm" />
        </form>

        <form method="post" action="@Url.Action("DeleteAllForumVotes", "Users", new { accountID = Model.AccountID })">
            @Html.AntiForgeryToken()
            This will <b>permanently</b> remove <b>all</b> of the user's upvotes/downvotes on forum.<br />
            This action <b>cannot</b> be undone!<br />
            <br />
            Enter the target's user name to confirm: @Html.TextBox("accountName")
            <input type="submit" value="Delete Forum Votes" class="js_confirm" />
        </form>
    </div>
</div>
