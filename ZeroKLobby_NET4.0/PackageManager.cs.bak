using System;
using System.Collections.Generic;
using System.IO;
using System.Runtime.Serialization.Formatters.Binary;
using System.Windows.Forms;

namespace CaUpdater
{
  // TODO save file entries on addfilenetry/removefileentry
  public class PackageManager
  {
    private const string cachePath = "/updater/filecache.dat";
    public static Dictionary<Package.AssetType, string> AssetPath;


    private Dictionary<Hash, FileEntry> hash2files = new Dictionary<Hash, FileEntry>();

    private Dictionary<string, FileEntry> name2files = new Dictionary<string, FileEntry>();

    private bool springFolderChanged = false;
    private string springPath;

    private FileSystemWatcher watch;

    public PackageManager(string springPath)
    {
      AssetPath = new Dictionary<Package.AssetType, string>();
      AssetPath.Add(Package.AssetType.Lua, "/luaui/widgets/");
      AssetPath.Add(Package.AssetType.Map, "/maps/");
      AssetPath.Add(Package.AssetType.Mod, "/mods/");

      watch = new FileSystemWatcher(springPath + AssetPath[Package.AssetType.Mod], "ca*.sdz");
      watch.Created += watch_Created;
      watch.Deleted += watch_Created;
      watch.Renamed += watch_Renamed;
      watch.EnableRaisingEvents = true;
      this.springPath = springPath;
      Scan();
    }


    public bool SpringFolderChanged
    {
      get { return springFolderChanged; }
    }

    public bool WatchFolder 
    {
      get { return watch.EnableRaisingEvents; }
      set { watch.EnableRaisingEvents = value; }
    }


    private void watch_Renamed(object sender, RenamedEventArgs e)
    {
      springFolderChanged = true;
    }

    private void watch_Created(object sender, FileSystemEventArgs e)
    {
      springFolderChanged = true;
    }


    public FileEntry GetFileEntry(Hash hash)
    {
      FileEntry ret = null;
      hash2files.TryGetValue(hash, out ret);
      return ret;
    }

    public FileEntry GetFileEntry(string path)
    {
      FileEntry ret = null;
      name2files.TryGetValue(path, out ret);
      return ret;
    }

    public string SanitizePath(string path)
    {
      if (path.StartsWith(springPath)) {
        path = path.Substring(springPath.Length);
      }
      while (path.Length > 1 && (path[1] == '/' || path[1] == '\\')) {
        path = path.Substring(1);
      }
      return path;
    }


    public void AddFileEntry(string path, Hash hash, List<PoolFileInfo> fileHashes)
    {
      path = SanitizePath(path);
      string fullPath = Utils.MakePath(springPath, path);
      FileEntry fe = new FileEntry();
      fe.Path = path;
      fe.Modified = File.GetLastWriteTime(fullPath);
      fe.Size = (int)new FileInfo(fullPath).Length;
      fe.Hash = hash;
      fe.ModEntry = Program.ModList.GetByHash(hash);
      fe.FileHashes = new List<PoolFileInfo>();
      foreach (PoolFileInfo fi in fileHashes) {
        fe.FileHashes.Add(fi);
      }
      try {
        hash2files.Add(fe.Hash, fe);
      } catch {
      }
      ;
      if (!name2files.ContainsKey(fe.Path)) {
        name2files.Add(fe.Path, fe);
      } else name2files[fe.Path] = fe;

      SaveFileEntries();
    }

    public void RemoveFileEntry(string path)
    {
      Hash h = name2files[path].Hash;
      name2files.Remove(path);
      hash2files.Remove(h);
      SaveFileEntries();
    }

    public void ClearPool()
    {
      Program.Notify(this, "Removing unused pool files", "", false, 0, 0);
      Dictionary<Hash, int> pooled = Program.Pool.GetFileList();

      foreach (KeyValuePair<string, FileEntry> val in name2files) {
        pooled.Remove(val.Value.Hash);
        foreach (PoolFileInfo h in val.Value.FileHashes) pooled.Remove(h.Hash);
      }

      int i = 0;
      foreach (KeyValuePair<Hash, int> val in pooled) {
        Program.Pool.Remove(val.Key);
        i++;
      }
      Program.Notify(this, "Removing unused pool files", i + " files removed", false, 0, 0);


      foreach (string s in Directory.GetFiles(Utils.MakePath(springPath, "updater"), "*.gz")) {
        try {
          File.Delete(s);
        } catch {
        }
        ;
      }

      try {
        Directory.Delete(Utils.MakePath(springPath, "updater/incoming/maps"), true);
        Program.Notify(this, "Removing incoming partial torrents", "", false, 0, 0);
      } catch {
      }
      ;
    }


    public void SaveFileEntries()
    {
      List<FileEntry> toSave = new List<FileEntry>();
      foreach (KeyValuePair<string, FileEntry> v in name2files) {
        toSave.Add(v.Value);
      }

      BinaryFormatter bf = new BinaryFormatter();
      string tempFileName = Path.GetTempFileName();
      using (FileStream fs = new FileStream(tempFileName, FileMode.Create)) {
        bf.Serialize(fs, toSave);
      }
      try {
        File.Delete(Utils.MakePath(springPath, cachePath));
      } catch {
      }
      ;
      File.Move(tempFileName, Utils.MakePath(springPath, cachePath));
    }


    public void Scan()
    {
      springFolderChanged = false;
      string status = "Scanning Spring";
      Program.Notify(this, status, "loading cache", false, 0, 0);
      //hash2files.Clear();
      //name2files.Clear();

      List<string> todel = new List<string>();

      if (name2files.Count == 0) {
        // not loaded
        string fileCache = Utils.MakePath(springPath, cachePath);
        if (File.Exists(fileCache) && Program.Conf.RehashDone) {
          using (FileStream fs = new FileStream(fileCache, FileMode.Open)) {
            List<FileEntry> fileList = new List<FileEntry>();
            try {
              fileList = (List<FileEntry>)new BinaryFormatter().Deserialize(fs);
            } catch (Exception e) {
              Program.Notify(this, "loading cache failed - recreating", e.ToString(), true, 0, 0);
            }
            foreach (FileEntry fe in fileList) {
              try {
                hash2files.Add(fe.Hash, fe);
              } catch {
              }
              ;
              name2files.Add(fe.Path, fe);
              todel.Add(fe.Path);
            }
          }
        } else {
          Program.Conf.RehashDone = true;
          Program.SaveConfig();
        }
      } else {
        // already loaded
        foreach (KeyValuePair<string, FileEntry> val in name2files) {
          todel.Add(val.Key);
        }
      }

      List<string> pathsToAdd = new List<string>();
      List<string> pathsToAddPool = new List<string>();

      long totalSize = 0;

      Program.Notify(this, status, "scanning mods", false, 0, 0);
      foreach (string s in Directory.GetFiles(Utils.MakePath(springPath, AssetPath[Package.AssetType.Mod]), "ca*.sdz", SearchOption.AllDirectories)) {
        ScanFile(s, todel, pathsToAddPool, ref totalSize);
      }


      /*Program.Notify(this, status, "scanning maps", false, 0, 0);
      foreach (string s in Directory.GetFiles(Utils.MakePath(springPath, AssetPath[Package.AssetType.Map]), "*.*", SearchOption.AllDirectories)) {
        ScanFile(s, todel, pathsToAdd, ref totalSize);
      }*/

      /*Program.Notify(this, status, "scanning lua", false, 0, 0);
      foreach (string s in Directory.GetFiles(Utils.MakePath(springPath,  AssetPath[Package.AssetType.Lua]), "*.*", SearchOption.AllDirectories)) {
        ScanFile(s, todel, pathsToAddPool, ref totalSize);
      }*/

      long doneSize = 0;
      Program.Notify(this, status, "hashing", false, doneSize, totalSize);

      foreach (string s in todel) {
        RemoveFileEntry(s);
      }

      foreach (string s in pathsToAddPool) {
        if (TaskManager.Cancel) break;
        AddFile(s, totalSize, ref doneSize);
      }


      SaveFileEntries();
      Program.Notify(this, "Scanning Spring", "complete", false, 0, 0);
    }


    private void AddFile(string s, long totalSize, ref long doneSize)
    {
      try {
        Program.Notify(this, "Hashing", s, false, doneSize, totalSize);
        string fullPath = Utils.MakePath(springPath, s);
        FileEntry fe = new FileEntry();
        fe.Path = s;
        fe.Modified = File.GetLastWriteTime(fullPath);
        fe.Size = (int)new FileInfo(fullPath).Length;
        fe.Hash = Hash.HashFile(fullPath, Program.Pool, out fe.FileHashes);
        fe.ModEntry = Program.ModList.GetByHash(fe.Hash);
        try {
          hash2files.Add(fe.Hash, fe);
        } catch {}
        name2files.Add(fe.Path, fe);
        doneSize += fe.Size;
        Program.Notify(this, "Hashing", s, false, doneSize, totalSize);
      } catch (Exception e) {
        Program.Notify(this, "Hashing " + s + " failed", e.ToString(), true, 0, 0);
      }
    }

    private bool ScanFile(string s, List<string> todel, List<string> pathsToAdd, ref long totalSize)
    {
      string shortPath = s.Substring(springPath.Length);
      FileEntry fe;
      name2files.TryGetValue(shortPath, out fe);
      int fileSize = (int)new FileInfo(s).Length;
      if (fe == null || fe.Size != fileSize || fe.Modified != File.GetLastWriteTime(s)) {
        pathsToAdd.Add(shortPath);
        totalSize += fileSize;
        return true;
      } else {
        todel.Remove(shortPath);
      }
      return false;
    }


    public int GetLatestInstalledVersion()
    {
      int i = 0;
      foreach (KeyValuePair<Hash, FileEntry> fe in hash2files) {
        if (fe.Value.ModEntry != null && fe.Value.ModEntry.Revision > i) {
          i = fe.Value.ModEntry.Revision;
        }
      }
      return i;
    }


    /// <summary>
    /// Find zip file containing most of those files
    /// </summary>
    /// <param name="files">list of files to search for</param>
    /// <returns></returns>
    /// <param name="entry"></param>
    public string GetCopyOfClosestZip(List<PoolFileInfo> files, out FileEntry entry)
    {
      entry = null;
      Dictionary<String, PoolFileInfo> keyed = new Dictionary<String, PoolFileInfo>();
      foreach (PoolFileInfo pf in files) {
        keyed.Add(pf.Name, pf);
      }

      int best = int.MinValue;
      FileEntry bestArchive = null;
      foreach (KeyValuePair<Hash, FileEntry> fe in hash2files) {
        if (fe.Value.FileHashes.Count > 0) {
          int cnt = 0;
          foreach (PoolFileInfo file in fe.Value.FileHashes) {
            if (keyed.ContainsKey(file.Name) && keyed[file.Name].Hash == file.Hash) cnt++;
          }
          if (cnt > best) {
            best = cnt;
            bestArchive = fe.Value;
          }
        }
      }

      if (bestArchive != null) {
        string tmp = Path.GetTempFileName();
        try {
          File.Copy(Utils.MakePath(springPath, bestArchive.Path), tmp, true);
          entry = bestArchive;
          return tmp;
        } catch {
          return null;
        }
      }
      return null;
    }


    public bool HasVersion(int version)
    {
      foreach (KeyValuePair<Hash, FileEntry> fe in hash2files) {
        if (fe.Value.ModEntry != null && fe.Value.ModEntry.Revision == version) return true;
      }
      return false;
    }

    public int GetLatestInstalledStable()
    {
      int i = 0;
      foreach (KeyValuePair<Hash, FileEntry> fe in hash2files) {
        if (fe.Value.ModEntry != null && fe.Value.ModEntry.Revision > i && fe.Value.ModEntry.Changelog.StartsWith("STABLE")) {
          i = fe.Value.ModEntry.Revision;
        }
      }
      return i;
    }

    public void UpdateModEntries()
    {
      foreach (KeyValuePair<Hash, FileEntry> fe in hash2files) {
        if (fe.Value.ModEntry == null) fe.Value.ModEntry = Program.ModList.GetByHash(fe.Value.Hash);
      }
    }

    public void DeleteToRevision(int revision)
    {
      int latestStable = int.MinValue;
      Package stableFile = null;
      List<Package> todel = new List<Package>();
      foreach (KeyValuePair<Hash, FileEntry> fe in hash2files) {
        if (fe.Value.ModEntry == null) todel.Add(new Package("", 0, fe.Value.Hash));
        else {
          if (fe.Value.ModEntry.Revision <= revision) {
            Package par = new Package("", 0, fe.Value.Hash);
            todel.Add(par);

            if (fe.Value.ModEntry.Changelog.StartsWith("STABLE")) {
              if (fe.Value.ModEntry.Revision > latestStable) {
                stableFile = par;
                latestStable = fe.Value.ModEntry.Revision;
              }
            }
          }
        }
      }
      if (stableFile != null) todel.Remove(stableFile);

      foreach (Package p in todel) {
        p.Delete();
      }
    }

    #region Nested type: FileEntry

    [Serializable]
    public class FileEntry
    {
      public List<PoolFileInfo> FileHashes = new List<PoolFileInfo>();
      public Hash Hash;
      public ModEntry ModEntry;
      public DateTime Modified;
      public string Path;
      public long Size;
    }

    #endregion
  }
}